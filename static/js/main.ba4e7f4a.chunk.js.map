{"version":3,"sources":["images/icon-supervisor.svg","images/icon-team-builder.svg","images/icon-karma.svg","images/icon-calculator.svg","components/Heading/Heading.js","components/Card/StyledCard.js","components/Paragraph/Paragraph.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Heading","styled","h1","props","primary","StyledCard","section","type","Paragraph","p","align","Card","src","title","desc","alt","App","className","supervisorImage","teamBuilderImage","karmaImage","calculatorImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,oUCE3C,IAOeC,EAPCC,IAAOC,GAAV,KAEM,SAAAC,GAAK,OAAIA,EAAMC,QAAU,OAAS,S,gRCFrD,IAceC,EAdIJ,IAAOK,QAAV,KAEE,SAAAH,GAAK,MAAI,aAAe,CAClC,qBACA,mBACA,oBACA,sBAAsBA,EAAMI,S,kICNpC,IAMeC,EANGP,IAAOQ,EAAV,KAEG,SAAAN,GAAK,OAAIA,EAAMO,MAAQP,EAAMO,MAAQ,aCAxC,SAASC,EAAT,GAAyC,IAA1BC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,KAAMP,EAAO,EAAPA,KAC5C,OACI,kBAAC,EAAD,CAAYA,KAAMA,GACd,4BAAKM,GACL,kBAAC,EAAD,KAAYC,GACZ,kBAAC,EAAD,CAAWJ,MAAM,SAAQ,yBAAKE,IAAKA,EAAKG,IAAKF,EAAQ,W,wEC8ClDG,MA9Cf,WACE,OACE,yBAAKC,UAAU,aACb,0BAAMA,UAAU,QACd,kBAAC,EAAD,qCACA,kBAAC,EAAD,CAASb,SAAO,GAAhB,yBACA,kBAAC,EAAD,CAAWM,MAAM,SAASO,UAAU,cAApC,2HAGA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,kBAACN,EAAD,CACEE,MAAM,aACNC,KAAK,oDACLF,IAAKM,IACLX,KAAM,KAGV,yBAAKU,UAAU,QACb,kBAACN,EAAD,CACEE,MAAM,eACNC,KAAK,uEACLF,IAAKO,IACLZ,KAAM,IAER,kBAACI,EAAD,CACEE,MAAM,QACNC,KAAK,mDACLF,IAAKQ,IACLb,KAAM,KAGV,yBAAKU,UAAU,QACb,kBAACN,EAAD,CACEE,MAAM,aACNC,KAAK,oEACLF,IAAKS,IACLd,KAAM,SClCAe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba4e7f4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-supervisor.8f7824b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-team-builder.8a1a6a17.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-karma.ae2dc13d.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-calculator.8e4a5574.svg\";","import styled from 'styled-components';\r\n\r\nconst Heading = styled.h1`\r\n    color: hsl(234, 12%, 34%);\r\n    font-weight: ${props => props.primary ? 'bold' : '200'};\r\n    text-align: center;\r\n    font-size: 2rem;\r\n`;\r\n\r\nexport default Heading;","import styled from 'styled-components';\r\n\r\nconst StyledCard = styled.section`\r\n    border-radius: 5px;\r\n    border-top: ${props => `5px solid ` + [\r\n        'hsl(180, 62%, 55%)',\r\n        'hsl(0, 78%, 62%)',\r\n        'hsl(34, 97%, 64%)',\r\n        'hsl(212, 86%, 64%)'][props.type]\r\n    };\r\n    padding: 1em;\r\n    box-shadow: 2px 10px 15px hsl(229, 6%, 66%), -2px 10px 15px hsl(229, 6%, 66%);\r\n    margin-bottom: 1.5em;\r\n    background: white;\r\n`;\r\n\r\nexport default StyledCard;","import styled from 'styled-components';\r\n\r\nconst Paragraph = styled.p`\r\n    color: hsl(229, 6%, 66%);\r\n    text-align: ${props => props.align ? props.align : 'initial'};\r\n    \r\n`;\r\n\r\nexport default Paragraph;","import React from 'react';\r\nimport StyledCard from './StyledCard';\r\nimport Paragraph from '../Paragraph/Paragraph';\r\n\r\nexport default function Card({src, title, desc, type}) {\r\n    return (\r\n        <StyledCard type={type}>\r\n            <h2>{title}</h2>\r\n            <Paragraph>{desc}</Paragraph>\r\n            <Paragraph align=\"right\"><img src={src} alt={title + 'icon'}/></Paragraph>\r\n        </StyledCard>\r\n    )\r\n}","import React from 'react';\nimport Heading from './components/Heading/Heading';\nimport Card from './components/Card/Card';\nimport Paragraph from './components/Paragraph/Paragraph'\nimport supervisorImage from './images/icon-supervisor.svg';\nimport teamBuilderImage from './images/icon-team-builder.svg';\nimport karmaImage from './images/icon-karma.svg';\nimport calculatorImage from './images/icon-calculator.svg';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <main className=\"main\">\n        <Heading>Reliable, efficient delivery</Heading>\n        <Heading primary>Powered by Technology</Heading>\n        <Paragraph align=\"center\" className=\"main__desc\">\n          Our Artificial Intelligence powered tools use millions of project data points to ensure that your project is successful\n        </Paragraph>\n        <div className=\"grid\">\n          <div className=\"cols\">\n            <Card\n              title=\"Supervisor\"\n              desc=\"Monitors activity to indentify project roadblocks\"\n              src={supervisorImage}\n              type={0}\n            />\n          </div>\n          <div className=\"cols\">\n            <Card\n              title=\"Team Builder\"\n              desc=\"Scans our talent network to create the optimal team for your project\"\n              src={teamBuilderImage}\n              type={1}\n            />\n            <Card\n              title=\"Karma\"\n              desc=\"Regularly evaluates our talent to ensure quality\"\n              src={karmaImage}\n              type={2}\n            />\n          </div>\n          <div className=\"cols\">\n            <Card\n              title=\"Calculator\"\n              desc=\"Uses data from past projects to provide better delivery estimates\"\n              src={calculatorImage}\n              type={3}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}